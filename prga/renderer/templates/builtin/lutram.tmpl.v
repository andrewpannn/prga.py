// design view
// Automatically generated by PRGA's RTL generator
// TODO: check yosys techmap docs
// TODO: verify if this is correct
{% set width = module.ports.in|length -%}
`timescale 1ns/1ps
module {{ module.name }} (
    input wire [{{ width - 1 }}:0] in
    , output reg [0:0] out

    , input wire [0:0] prog_done
    , input wire [{{ 2 ** width }}:0] prog_data
        // prog_data[ 0 +: {{ 2 ** width - 1}}]: LUT content
        // prog_data[{{ 2 ** width }}]: LUT enabled (not disabled)
    // additional LUTRAM ports
    , input wire [{{ width - 1 }}:0] wr_addr
    , input wire clk
    , input wire wr_en
    , input wire d_in
    );

    localparam  IDX_LUT_ENABLE = {{ 2 ** width }};
    logic [{{ 2 ** width }}:0] data;

    // LUTRAM
    always @(posedge clk) begin
        if (~prog_done || ~prog_data[IDX_LUT_ENABLE]) begin
            data <= prog_data;
        end else if (wr_en) begin
            data[wr_addr] <= d_in;
        end
    end

    always @* begin
        if (~prog_done || ~prog_data[IDX_LUT_ENABLE]) begin
            out = 1'b0; // disabled if IDX_LUT_ENABLE bit is not asserted
        end else begin
            case (in)
                {%- for i in range(2 ** width) %}
                {{ width }}'d{{ i }}: out = data[{{ i }}]; // auto generates case statement
                {%- endfor %}
            endcase
        end
    end

endmodule